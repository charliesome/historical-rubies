diff --git array.c array.c
index 28ea06f..e62cff1 100644
--- array.c
+++ array.c
@@ -11,6 +11,7 @@
 ************************************************/
 
 #include "ruby.h"
+#include <string.h>
 
 VALUE cArray;
 
@@ -82,12 +83,10 @@ ary_new()
     return ary_new2(ARY_DEFAULT_SIZE);
 }
 
-#include <varargs.h>
+#include <stdarg.h>
 
 VALUE
-ary_new3(n, va_alist)
-    int n;
-    va_dcl
+ary_new3(int n, ...)
 {
     va_list ar;
     struct RArray* ary;
@@ -98,7 +97,7 @@ ary_new3(n, va_alist)
     }
     ary = (struct RArray*)ary_new2(n<ARY_DEFAULT_SIZE?ARY_DEFAULT_SIZE:n);
 
-    va_start(ar);
+    va_start(ar, n);
     for (i=0; i<n; i++) {
 	ary->ptr[i] = va_arg(ar, VALUE);
     }
diff --git bignum.c bignum.c
index 4bdcb6b..a51e205 100644
--- bignum.c
+++ bignum.c
@@ -11,6 +11,7 @@
 #include "ruby.h"
 #include <ctype.h>
 #include <math.h>
+#include <string.h>
 
 extern VALUE cInteger;
 VALUE cBignum;
diff --git class.c class.c
index 6cb55fa..42b2b66 100644
--- class.c
+++ class.c
@@ -13,6 +13,8 @@
 #include "ruby.h"
 #include "node.h"
 #include "st.h"
+#include <string.h>
+#include <stdio.h>
 
 struct st_table *new_idhash();
 extern st_table *rb_class_tbl;
@@ -349,22 +351,18 @@ rb_define_attr(class, id, pub)
     }
 }
 
-#include <varargs.h>
+#include <stdarg.h>
 #include <ctype.h>
 
 int
-rb_scan_args(argc, argv, fmt, va_alist)
-    int argc;
-    VALUE *argv;
-    char *fmt;
-    va_dcl
+rb_scan_args(int argc, VALUE *argv, char *fmt, ...)
 {
     int n, i;
     char *p = fmt;
     VALUE *var;
     va_list vargs;
 
-    va_start(vargs);
+    va_start(vargs, fmt);
 
     if (*p == '*') {
 	var = va_arg(vargs, VALUE*);
diff --git configure configure
index dd18efc..5ebf60a 100755
--- configure
+++ configure
@@ -1,7 +1,9 @@
 #! /bin/sh
 
+export CFLAGS="-m32"
+
 # Guess values for system-dependent variables and create Makefiles.
-# Generated automatically using autoconf version 2.12 
+# Generated automatically using autoconf version 2.12
 # Copyright (C) 1992, 93, 94, 95, 96 Free Software Foundation, Inc.
 #
 # This configure script is free software; the Free Software Foundation
@@ -532,7 +534,7 @@ fi
 # Check whether --with-gcc or --without-gcc was given.
 if test "${with_gcc+set}" = set; then
   withval="$with_gcc"
-  
+
 	case $withval in
 	no)	CC=cc
 		without_gcc=yes;;
@@ -555,7 +557,7 @@ rb_thread=yes
 # Check whether --enable-thread or --disable-thread was given.
 if test "${enable_thread+set}" = set; then
   enableval="$enable_thread"
-  
+
 	rb_thread=$enableval
 
 fi
@@ -600,9 +602,8 @@ case "$host_alias" in
 NONE)
   case $nonopt in
   NONE)
-    if host_alias=`$ac_config_guess`; then :
-    else { echo "configure: error: can not guess host type; you must specify one" 1>&2; exit 1; }
-    fi ;;
+    host_alias=""
+  ;;
   *) host_alias=$nonopt ;;
   esac ;;
 esac
@@ -619,7 +620,7 @@ fat_binary=no
 # Check whether --enable-fat-binary or --disable-fat-binary was given.
 if test "${enable_fat_binary+set}" = set; then
   enableval="$enable_fat_binary"
-   fat_binary=$enableval  
+   fat_binary=$enableval
 fi
 
 if test "$fat_binary" = yes ; then
@@ -635,7 +636,7 @@ echo "configure:629: checking target architecture " >&5
         fi
     fi
     # /usr/lib/arch_tool -archify_list $TARGET_ARCHS
-    for archs in $TARGET_ARCHS 
+    for archs in $TARGET_ARCHS
     do
         ARCH_FLAG="$ARCH_FLAG -arch $archs "
         echo -n " $archs"
@@ -645,7 +646,7 @@ echo "configure:629: checking target architecture " >&5
 EOF
 
     echo "."
-fi 
+fi
 
 
 if test "$program_transform_name" = s,x,x,; then
@@ -1595,7 +1596,7 @@ if eval "test \"`echo '$ac_cv_header_'$ac_safe`\" = yes"; then
   cat >> confdefs.h <<EOF
 #define $ac_tr_hdr 1
 EOF
- 
+
 else
   echo "$ac_t""no" 1>&6
 fi
@@ -2566,7 +2567,7 @@ if eval "test \"`echo '$ac_cv_func_'$ac_func`\" = yes"; then
   cat >> confdefs.h <<EOF
 #define $ac_tr_func 1
 EOF
- 
+
 else
   echo "$ac_t""no" 1>&6
 LIBOBJS="$LIBOBJS ${ac_func}.o"
@@ -2627,7 +2628,7 @@ if eval "test \"`echo '$ac_cv_func_'$ac_func`\" = yes"; then
   cat >> confdefs.h <<EOF
 #define $ac_tr_func 1
 EOF
- 
+
 else
   echo "$ac_t""no" 1>&6
 fi
@@ -3238,7 +3239,7 @@ fi
 # Check whether --with-dln-a-out or --without-dln-a-out was given.
 if test "${with_dln_a_out+set}" = set; then
   withval="$with_dln_a_out"
-  
+
 	case $withval in
 	yes) with_dln_a_out=yes;;
 	*)   with_dln_a_out=no;;
@@ -3351,7 +3352,7 @@ echo "configure:3313: checking whether OS depend dynamic link works" >&5
 			rb_cv_dlopen=yes ;;
 	nextstep*)	LDSHARED='cc -r'
 			LDFLAGS="-u libsys_s"
-			DLDFLAGS="$ARCH_FLAG" 
+			DLDFLAGS="$ARCH_FLAG"
 			rb_cv_dlopen=yes ;;
 	aix*)		LDSHARED='../../miniruby ../aix_ld.rb $(TARGET)'
 			rb_cv_dlopen=yes ;;
@@ -3608,7 +3609,7 @@ if eval "test \"`echo '$ac_cv_func_'$ac_func`\" = yes"; then
   cat >> confdefs.h <<EOF
 #define $ac_tr_func 1
 EOF
- 
+
 else
   echo "$ac_t""no" 1>&6
 fi
@@ -3729,7 +3730,7 @@ if test "$fat_binary" = yes ; then
     arch="fat-${host_os}"
 
     cat >> confdefs.h <<EOF
-#define RUBY_THIN_ARCHLIB "${prefix}/lib/ruby/" __ARCHITECTURE__ "-${host_os}" 
+#define RUBY_THIN_ARCHLIB "${prefix}/lib/ruby/" __ARCHITECTURE__ "-${host_os}"
 EOF
 
 
@@ -3738,7 +3739,7 @@ EOF
 EOF
 
     cat >> confdefs.h <<EOF
-#define RUBY_PLATFORM __ARCHITECTURE__ "-${host_os}" 
+#define RUBY_PLATFORM __ARCHITECTURE__ "-${host_os}"
 EOF
 
 else
diff --git dir.c dir.c
index ca2ca21..0f01b39 100644
--- dir.c
+++ dir.c
@@ -11,6 +11,7 @@
 ************************************************/
 
 #include "ruby.h"
+#include <string.h>
 
 #include <sys/types.h>
 #ifdef HAVE_UNISTD_H
diff --git dln.c dln.c
index ee5429a..5a9657f 100644
--- dln.c
+++ dln.c
@@ -54,7 +54,7 @@ void *xrealloc();
 #endif
 
 #ifndef NT
-char *strdup();
+/*char *strdup();*/
 
 char *getenv();
 #endif
diff --git enum.c enum.c
index 63ef9e9..6e45ff8 100644
--- enum.c
+++ enum.c
@@ -78,7 +78,7 @@ find_i(i, arg)
 static VALUE
 enum_find(argc, argv, obj)
     int argc;
-    VALUE argv;
+    VALUE* argv;
     VALUE obj;
 {
     struct find_arg arg;
diff --git error.c error.c
index 3427310..556480c 100644
--- error.c
+++ error.c
@@ -13,7 +13,8 @@
 #include "ruby.h"
 #include "env.h"
 #include <stdio.h>
-#include <varargs.h>
+#include <stdarg.h>
+#include <string.h>
 
 extern char *sourcefile;
 extern int   sourceline;
@@ -68,36 +69,30 @@ err_print(fmt, args)
 }
 
 void
-Error(fmt, va_alist)
-    char *fmt;
-    va_dcl
+Error(char* fmt, ...)
 {
     va_list args;
 
-    va_start(args);
+    va_start(args, fmt);
     err_print(fmt, args);
     va_end(args);
     nerrs++;
 }
 
 void
-Error_Append(fmt, va_alist)
-    char *fmt;
-    va_dcl
+Error_Append(char* fmt, ...)
 {
     va_list args;
     char buf[BUFSIZ];
 
-    va_start(args);
+    va_start(args, fmt);
     vsprintf(buf, fmt, args);
     va_end(args);
     err_append(buf);
 }
 
 void
-Warning(fmt, va_alist)
-    char *fmt;
-    va_dcl
+Warning(char* fmt, ...)
 {
     char buf[BUFSIZ];
     va_list args;
@@ -106,15 +101,13 @@ Warning(fmt, va_alist)
 
     sprintf(buf, "warning: %s", fmt);
 
-    va_start(args);
+    va_start(args, fmt);
     err_print(buf, args);
     va_end(args);
 }
 
 void
-Bug(fmt, va_alist)
-    char *fmt;
-    va_dcl
+Bug(char* fmt, ...)
 {
     char buf[BUFSIZ];
     va_list args;
@@ -122,7 +115,7 @@ Bug(fmt, va_alist)
     sprintf(buf, "[BUG] %s", fmt);
     rb_in_eval = 0;
 
-    va_start(args);
+    va_start(args, fmt);
     err_print(buf, args);
     va_end(args);
     abort();
@@ -156,7 +149,7 @@ static struct types {
     -1,		0,
 };
 
-extern void TypeError();
+extern void TypeError(char*, ...);
 
 void
 rb_check_type(x, t)
@@ -267,7 +260,7 @@ exception(argc, argv)
     int argc;
     VALUE *argv;
 {
-    void ArgError();
+    void ArgError(char*, ...);
     VALUE v = Qnil;
     int i;
     ID id;
@@ -292,10 +285,6 @@ exception(argc, argv)
 
 static VALUE *syserr_list;
 
-#ifndef NT
-extern int sys_nerr;
-#endif
-
 static void
 set_syserr(i, name)
     int i;
@@ -341,7 +330,7 @@ Init_Exception()
     va_list args;\
     char buf[BUFSIZ];\
 \
-    va_start(args);\
+    va_start(args, fmt);\
     vsprintf(buf, fmt, args);\
     va_end(args);\
 \
@@ -349,50 +338,37 @@ Init_Exception()
 }
 
 void
-Raise(exc, fmt, va_alist)
-    VALUE exc;
-    char *fmt;
-    va_dcl
+Raise(VALUE exc, char* fmt, ...)
 {
     RAISE_ERROR(exc);
 }
 
 void
-TypeError(fmt, va_alist)
-    char *fmt;
-    va_dcl
+TypeError(char* fmt, ...)
 {
     RAISE_ERROR(eTypeError);
 }
 
 void
-ArgError(fmt, va_alist)
-    char *fmt;
-    va_dcl
+ArgError(char* fmt, ...)
 {
     RAISE_ERROR(eArgError);
 }
 
 void
-NameError(fmt, va_alist)
-    char *fmt;
-    va_dcl
+NameError(char* fmt, ...)
 {
     RAISE_ERROR(eNameError);
 }
 
 void
-IndexError(fmt, va_alist)
-    char *fmt;
-    va_dcl
+IndexError(char* fmt, ...)
 {
     RAISE_ERROR(eIndexError);
 }
 
 void
-Fail(fmt, va_alist)
-    char *fmt;
-    va_dcl
+Fail(char* fmt, ...)
 {
     RAISE_ERROR(eRuntimeError);
 }
@@ -403,25 +379,22 @@ rb_notimplement()
     Raise(eNotImpError,
 	  "The %s() function is unimplemented on this machine",
 	  rb_id2name(the_frame->last_func));
+    abort();
 }
 
 void
-LoadError(fmt, va_alist)
-    char *fmt;
-    va_dcl
+LoadError(char* fmt, ...)
 {
     RAISE_ERROR(eLoadError);
 }
 
 void
-Fatal(fmt, va_alist)
-    char *fmt;
-    va_dcl
+Fatal(char* fmt, ...)
 {
     va_list args;
     char buf[BUFSIZ];
 
-    va_start(args);
+    va_start(args, fmt);
     vsprintf(buf, fmt, args);
     va_end(args);
 
diff --git eval.c eval.c
index 1e10ee2..b042b68 100644
--- eval.c
+++ eval.c
@@ -2243,7 +2243,7 @@ f_retry()
 }
 
 #ifdef __GNUC__
-static volatile voidfn rb_longjmp;
+static void rb_longjmp();
 #endif
 
 static VALUE make_backtrace();
@@ -3144,14 +3144,10 @@ f_send(argc, argv, recv)
     return vid;
 }
 
-#include <varargs.h>
+#include <stdarg.h>
 
 VALUE
-rb_funcall(recv, mid, n, va_alist)
-    VALUE recv;
-    ID mid;
-    int n;
-    va_dcl
+rb_funcall(VALUE recv, ID mid, int n, ...)
 {
     va_list ar;
     VALUE *argv;
@@ -3161,7 +3157,7 @@ rb_funcall(recv, mid, n, va_alist)
 
 	argv = ALLOCA_N(VALUE, n);
 
-	va_start(ar);
+	va_start(ar, n);
 	for (i=0;i<n;i++) {
 	    argv[i] = va_arg(ar, VALUE);
 	}
@@ -4969,6 +4965,8 @@ thread_stop()
     return Qnil;
 }
 
+struct timeval time_timeval();
+
 void
 thread_sleep(sec)
     int sec;
diff --git ext/curses/curses.c ext/curses/curses.c
index 6e8e496..b8261f2 100644
--- ext/curses/curses.c
+++ ext/curses/curses.c
@@ -22,6 +22,7 @@
 #endif
 
 #include "ruby.h"
+#include <string.h>
 
 static VALUE mCurses;
 static VALUE cWindow;
diff --git ext/dbm/dbm.c ext/dbm/dbm.c
index 5107aab..6e8f6e4 100644
--- ext/dbm/dbm.c
+++ ext/dbm/dbm.c
@@ -15,6 +15,7 @@
 #include <ndbm.h>
 #include <fcntl.h>
 #include <errno.h>
+#include <string.h>
 
 VALUE cDBM;
 
diff --git ext/extmk.rb.in ext/extmk.rb.in
index 78fe307..a2ad6f0 100644
--- ext/extmk.rb.in
+++ ext/extmk.rb.in
@@ -207,6 +207,13 @@ def create_makefile(target)
 
   $srcdir = $topdir + "/ext/" + target
   mfile = open("Makefile", "w")
+  
+  if `uname` == "Darwin\n"
+    additional_dldflags = "-undefined dynamic_lookup"
+  else
+    additional_dldflags = ""
+  end
+  
   mfile.printf "\
 SHELL = /bin/sh
 
@@ -218,7 +225,7 @@ VPATH = #{$srcdir}
 CC = @CC@
 
 CFLAGS   = %s -I#{$topdir} %s #$CFLAGS %s
-DLDFLAGS = @DLDFLAGS@ #$LDFLAGS
+DLDFLAGS = @DLDFLAGS@ #$LDFLAGS #{additional_dldflags}
 LDSHARED = @LDSHARED@
 ", if $static then "" else "@CCDLFLAGS@" end, CFLAGS, $defs.join(" ")
 
diff --git ext/marshal/marshal.c ext/marshal/marshal.c
index 99e87d0..c24254f 100644
--- ext/marshal/marshal.c
+++ ext/marshal/marshal.c
@@ -12,6 +12,7 @@
 #include "ruby.h"
 #include "io.h"
 #include "st.h"
+#include <string.h>
 
 #define MARSHAL_MAJOR   4
 #define MARSHAL_MINOR   0
@@ -398,7 +399,7 @@ dump_ensure(arg)
 static VALUE
 marshal_dump(argc, argv)
     int argc;
-    VALUE argv;
+    VALUE* argv;
 {
     VALUE obj, port, a1, a2;
     int limit = -1;
diff --git ext/md5/md5init.c ext/md5/md5init.c
index 762d53e..791dd86 100644
--- ext/md5/md5init.c
+++ ext/md5/md5init.c
@@ -15,6 +15,7 @@
 
 #include "ruby.h"
 #include "md5.h"
+#include <string.h>
 
 static VALUE cMD5;
 
@@ -60,7 +61,7 @@ md5_clone(obj)
 }
 
 static VALUE
-md5_new(argc, argv, class)
+md5_new(int argc, VALUE* argv, VALUE class)
 {
     int i;
     VALUE arg, obj;
diff --git ext/socket/socket.c ext/socket/socket.c
index be9118d..b1be0d9 100644
--- ext/socket/socket.c
+++ ext/socket/socket.c
@@ -16,6 +16,7 @@
 #include <netinet/in.h>
 #include <netdb.h>
 #include <errno.h>
+#include <string.h>
 #ifdef HAVE_SYS_UN_H
 #include <sys/un.h>
 #endif
diff --git file.c file.c
index db21a35..f272ac5 100644
--- file.c
+++ file.c
@@ -53,8 +53,8 @@ char *strrchr();
 #endif
 
 #ifndef NT
-char *strdup();
-char *getenv();
+/*char *strdup();
+char *getenv();*/
 #endif
 
 extern VALUE cIO;
@@ -1229,7 +1229,7 @@ file_s_expand_path(obj, fname)
     struct RString *fname;
 {
     char *s, *p;
-    char buf[MAXPATHLEN];
+    char buf[MAXPATHLEN], *unused;
 
     Check_Type(fname, T_STRING);
     s = fname->ptr;
@@ -1270,7 +1270,7 @@ file_s_expand_path(obj, fname)
     }
     else if (s[0] != '/') {
 #ifdef HAVE_GETCWD
-	getcwd(buf, MAXPATHLEN);
+	unused = getcwd(buf, MAXPATHLEN);
 #else
 	getwd(buf);
 #endif
diff --git gc.c gc.c
index f356477..7773e5e 100644
--- gc.c
+++ gc.c
@@ -18,6 +18,7 @@
 #include "re.h"
 #include <stdio.h>
 #include <setjmp.h>
+#include <string.h>
 
 #ifndef setjmp
 #ifdef HAVE__SETJMP
@@ -718,29 +719,29 @@ gc_mark_frame(frame)
 #if defined(__human68k__) || defined(DJGPP)
 #if defined(__human68k__)
 typedef unsigned long rb_jmp_buf[8];
-__asm__ (".even
-_rb_setjmp:
-	move.l	4(sp),a0
-	movem.l	d3-d7/a3-a5,(a0)
-	moveq.l	#0,d0
-	rts");
+__asm__ (".even\n"
+"_rb_setjmp:\n"
+"	move.l	4(sp),a0\n"
+"	movem.l	d3-d7/a3-a5,(a0)\n"
+"	moveq.l	#0,d0\n"
+"	rts");
 #else
 #if defined(DJGPP)
 typedef unsigned long rb_jmp_buf[6];
-__asm__ (".align 4
-_rb_setjmp:
-	pushl	%ebp
-	movl	%esp,%ebp
-	movl	8(%ebp),%ebp
-	movl	%eax,(%ebp)
-	movl	%ebx,4(%ebp)
-	movl	%ecx,8(%ebp)
-	movl	%edx,12(%ebp)
-	movl	%esi,16(%ebp)
-	movl	%edi,20(%ebp)
-	popl	%ebp
-	xorl	%eax,%eax
-	ret");
+__asm__ (".align 4\n"
+"_rb_setjmp:\n"
+"	pushl	%ebp\n"
+"	movl	%esp,%ebp\n"
+"	movl	8(%ebp),%ebp\n"
+"	movl	%eax,(%ebp)\n"
+"	movl	%ebx,4(%ebp)\n"
+"	movl	%ecx,8(%ebp)\n"
+"	movl	%edx,12(%ebp)\n"
+"	movl	%esi,16(%ebp)\n"
+"	movl	%edi,20(%ebp)\n"
+"	popl	%ebp\n"
+"	xorl	%eax,%eax\n"
+"	ret");
 #endif
 #endif
 int rb_setjmp (rb_jmp_buf);
diff --git glob.c glob.c
index 6c355ad..71fe5c2 100644
--- glob.c
+++ glob.c
@@ -19,6 +19,9 @@
    Unix programs use to perform this function.  I wrote this from scratch
    based on specifications for the pattern matching.  --RMS.  */
 
+#include <alloca.h>
+#include <stdlib.h>
+#include <stdio.h>
 #include "config.h"
 
 #include <sys/types.h>
@@ -78,12 +81,6 @@
 
 #ifdef _AIX
 #pragma alloca
-#else
-#if defined(HAVE_ALLOCA_H) && !defined(__GNUC__)
-#include <alloca.h>
-#else
-char *alloca ();
-#endif
 #endif
 
 #include "fnmatch.h"
diff --git io.c io.c
index d74337f..89db8d0 100644
--- io.c
+++ io.c
@@ -14,6 +14,7 @@
 #include "io.h"
 #include <ctype.h>
 #include <errno.h>
+#include <string.h>
 
 #include <sys/types.h>
 #if !defined(DJGPP) && !defined(NT) && !defined(__human68k__)
@@ -332,7 +333,7 @@ static VALUE lineno;
 VALUE
 io_gets_method(argc, argv, io)
     int argc;
-    VALUE argv;
+    VALUE* argv;
     VALUE io;
 {
     OpenFile *fptr;
@@ -961,7 +962,7 @@ pipe_open(pname, mode)
 	    rb_proc_exec(pname);
 	    fprintf(stderr, "%s:%d: command not found: %s\n",
 		    sourcefile, sourceline, pname);
-	    _exit(127);
+	    exit(127);
 	}
 	return Qnil;
 
@@ -1065,10 +1066,6 @@ f_open(argc, argv, self)
     return io_open(RSTRING(pname)->ptr, mode);
 }
 
-#ifndef NT
-extern char *strdup();
-#endif
-
 VALUE
 io_reopen(io, nfile)
     VALUE io, nfile;
diff --git numeric.c numeric.c
index 6c54bf9..73d9e80 100644
--- numeric.c
+++ numeric.c
@@ -12,6 +12,7 @@
 
 #include "ruby.h"
 #include <math.h>
+#include <stdio.h>
 #if defined (HAVE_STRING_H)
 #  include <string.h>
 #else
diff --git object.c object.c
index a0e1eb3..1c0a461 100644
--- object.c
+++ object.c
@@ -13,6 +13,7 @@
 #include "ruby.h"
 #include "st.h"
 #include <stdio.h>
+#include <string.h>
 
 VALUE mKernel;
 VALUE cObject;
@@ -175,7 +176,7 @@ obj_inspect(obj)
 
 	return str;
     }
-    return rb_funcall(obj, rb_intern("to_s"), 0, 0);
+    return rb_funcall((VALUE)obj, rb_intern("to_s"), 0, 0);
 }
 
 VALUE
diff --git pack.c pack.c
index ccb5143..5278566 100644
--- pack.c
+++ pack.c
@@ -11,6 +11,7 @@
 ************************************************/
 
 #include "ruby.h"
+#include <string.h>
 #include <ctype.h>
 #include <sys/types.h>
 
diff --git parse.y parse.y
index 6b0a124..ff77cf9 100644
--- parse.y
+++ parse.y
@@ -18,6 +18,7 @@
 #include "node.h"
 #include "st.h"
 #include <stdio.h>
+#include <string.h>
 
 /* hack for bison */
 #ifdef const
@@ -1364,7 +1365,6 @@ VALUE newregexp();
 VALUE newstring();
 VALUE newfloat();
 VALUE newinteger();
-char *strdup();
 
 static NODE *str_extend();
 
@@ -3498,8 +3498,6 @@ st_table *rb_symbol_tbl;
 void
 Init_sym()
 {
-    int strcmp();
-
     sym_tbl = st_init_strtable();
     rb_global_variable(&cur_cref);
 }
diff --git process.c process.c
index 4d1d96e..fac2d70 100644
--- process.c
+++ process.c
@@ -11,6 +11,7 @@
 ************************************************/
 
 #include "ruby.h"
+#include <string.h>
 #include "sig.h"
 #include <stdio.h>
 #include <errno.h>
diff --git re.c re.c
index 19b274b..5a0fe88 100644
--- re.c
+++ re.c
@@ -12,6 +12,7 @@
 
 #include "ruby.h"
 #include "re.h"
+#include <string.h>
 
 static VALUE eRegxpError;
 
diff --git regex.c regex.c
index 686695c..eb45bbb 100644
--- regex.c
+++ regex.c
@@ -27,6 +27,8 @@
 
 /* We write fatal error messages on standard error.  */
 #include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
 
 /* isalpha(3) etc. are used for the character classes.  */
 #include <ctype.h>
diff --git ruby.c ruby.c
index 1bc89ad..8b2b924 100644
--- ruby.c
+++ ruby.c
@@ -36,7 +36,6 @@ int tainting = FALSE;
 static int sflag = FALSE;
 
 char *inplace = FALSE;
-char *strdup();
 
 extern char *sourcefile;
 extern int yydebug;
diff --git ruby.h ruby.h
index 9ac9d32..aacf5ac 100644
--- ruby.h
+++ ruby.h
@@ -324,8 +324,8 @@ char *rb_class2name _((VALUE));
 int rb_method_boundp _((VALUE,ID,int));
 
 VALUE rb_eval_string _((char*));
-VALUE rb_funcall();
-int rb_scan_args();
+VALUE rb_funcall(VALUE, ID, int, ...);
+int rb_scan_args(int argc, VALUE *argv, char* fmt, ...);
 
 VALUE rb_iv_get();
 VALUE rb_iv_set();
@@ -342,24 +342,6 @@ extern int verbose, debug;
 int rb_safe_level();
 void rb_set_safe_level _((int));
 
-#ifdef __GNUC__
-typedef void voidfn ();
-volatile voidfn Raise;
-volatile voidfn Fail;
-volatile voidfn Fatal;
-volatile voidfn Bug;
-volatile voidfn WrongType;
-volatile voidfn rb_sys_fail;
-volatile voidfn rb_break;
-volatile voidfn rb_exit;
-volatile voidfn rb_fatal;
-volatile voidfn rb_raise;
-volatile voidfn rb_notimplement;
-#else
-void Raise();
-void Fail();
-void Fatal();
-void Bug();
 void WrongType();
 void rb_sys_fail();
 void rb_break();
@@ -367,10 +349,14 @@ void rb_exit();
 void rb_fatal();
 void rb_raise();
 void rb_notimplement();
-#endif
 
-void Error();
-void Warning();
+void Raise(VALUE, char*, ...);
+void Fail(char*, ...);
+void Fatal(char*, ...);
+void Bug(char*, ...);
+
+void Error(char* fmt, ...);
+void Warning(char* fmt, ...);
 
 #if defined(EXTLIB) && defined(USE_DLN_A_OUT)
 /* hook for external modules */
diff --git sprintf.c sprintf.c
index 015d3d4..710dba0 100644
--- sprintf.c
+++ sprintf.c
@@ -12,6 +12,8 @@
 
 #include "ruby.h"
 #include <ctype.h>
+#include <string.h>
+#include <stdio.h>
 
 static void fmt_setup();
 
diff --git st.c st.c
index 6b25bc8..bb39c07 100644
--- st.c
+++ st.c
@@ -4,6 +4,7 @@ static	char	sccsid[] = "@(#) st.c 5.1 89/12/14 Crucible";
 
 #include "config.h"
 #include <stdio.h>
+#include <stdlib.h>
 #include "st.h"
 
 #define ST_DEFAULT_MAX_DENSITY 5
diff --git string.c string.c
index b9025cc..3f144ef 100644
--- string.c
+++ string.c
@@ -17,6 +17,7 @@
 #define END(no) regs->end[no]
 
 #include <stdio.h>
+#include <string.h>
 #include <ctype.h>
 
 VALUE cString;
diff --git struct.c struct.c
index d9e68a2..33d196f 100644
--- struct.c
+++ struct.c
@@ -9,6 +9,8 @@
 ************************************************/
 
 #include "ruby.h"
+#include <string.h>
+#include <stdio.h>
 
 ID rb_frame_last_func();
 VALUE cStruct;
@@ -155,12 +157,10 @@ make_struct(name, member)
     return nstr;
 }
 
-#include <varargs.h>
+#include <stdarg.h>
 
 VALUE
-struct_define(name, va_alist)
-    char *name;
-    va_dcl
+struct_define(char* name, ...)
 {
     va_list ar;
     VALUE nm, ary;
@@ -169,7 +169,7 @@ struct_define(name, va_alist)
     nm = str_new2(name);
     ary = ary_new();
 
-    va_start(ar);
+    va_start(ar, name);
     while (mem = va_arg(ar, char*)) {
 	ID slot = rb_intern(mem);
 	ary_push(ary, INT2FIX(slot));
@@ -225,9 +225,7 @@ struct_alloc(class, values)
 }
 
 VALUE
-struct_new(class, va_alist)
-    VALUE class;
-    va_dcl
+struct_new(VALUE class, ...)
 {
     VALUE val, mem;
     int size;
@@ -236,7 +234,7 @@ struct_new(class, va_alist)
     val = rb_iv_get(class, "__size__");
     size = FIX2INT(val); 
     mem = ary_new();
-    va_start(args);
+    va_start(args, class);
     while (size--) {
 	val = va_arg(args, VALUE);
 	ary_push(mem, val);
diff --git variable.c variable.c
index b0d6736..0e98f6c 100644
--- variable.c
+++ variable.c
@@ -12,6 +12,7 @@
 #include "env.h"
 #include "node.h"
 #include "st.h"
+#include <stdio.h>
 
 #ifdef HAVE_STRING_H
 # include <string.h>
